{"version":3,"sources":["components/UpdateMovie.js","components/DelConBtn.js","components/Movie.js","components/NewMovie.js","components/Movies.js","App.js","serviceWorker.js","index.js"],"names":["UpdateMovie","state","title","props","movie","year","seen","handleSubmit","event","preventDefault","fetch","process","_id","method","headers","body","JSON","stringify","then","response","json","data","console","log","toggleForm","refresh","handleChange","setState","target","name","value","onSubmit","this","type","placeholder","onChange","required","React","Component","DelConBtn","timesPressed","onPress","action","times","dialog","level","onClick","defaultProps","Movie","deleteMovies","useState","update","setUpdate","NewMovie","Movies","id","movies","getMovies","bind","displayMovies","map","key","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2be1509e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class UpdateMovie extends React.Component {\r\n    state = {\r\n        title: this.props.movie.title,\r\n        year: this.props.movie.year,\r\n        seen: this.props.movie.seen\r\n    };\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const api_url = process.env.REACT_APP_API_URL;\r\n        fetch(`${api_url}/movies/${this.props.movie._id}`, {\r\n            method: \"PUT\",\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(this.state) \r\n        }) .then(response => response.json())\r\n            .then(data => console.log(data))\r\n            .then(this.props.toggleForm)\r\n            .then(this.props.refresh)            \r\n    }\r\n    handleChange = (event) => {\r\n        this.setState({ [event.target.name] : event.target.value});\r\n    }\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                <input name=\"title\"\r\n                    type=\"text\"\r\n                    placeholder=\"Movie Title\"\r\n                    value={this.state.title}\r\n                    onChange={this.handleChange} \r\n                    required/>\r\n                <input name=\"year\"\r\n                    type=\"number\"\r\n                    placeholder=\"YYYY\"\r\n                    value={this.state.year}\r\n                    onChange={this.handleChange} />\r\n                <input name=\"seen\"\r\n                    type=\"text\"\r\n                    placeholder=\"Seen it?\"\r\n                    value={this.state.seen}\r\n                    onChange={this.handleChange} />\r\n                \r\n                \r\n                <input type=\"submit\"\r\n                    value=\"Update Movie\"/>\r\n            </form>           \r\n        ) \r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default class DelConBtn extends Component {\r\n  static propTypes = {\r\n    action: PropTypes.func.isRequired,\r\n    times: PropTypes.number\r\n  };\r\n\r\n  static defaultProps = {\r\n    times: 2\r\n  };\r\n\r\n  state = {\r\n    timesPressed: 0\r\n  };\r\n\r\n  onPress = () => {\r\n    const { timesPressed } = this.state;\r\n    const { action, times } = this.props;\r\n    this.setState(\r\n      {\r\n        timesPressed: timesPressed + 1\r\n      },\r\n      () => {\r\n        if (this.state.timesPressed === times) {\r\n          action();\r\n          this.setState({ timesPressed: 0 });\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { timesPressed } = this.state;\r\n    const { dialog } = this.props;\r\n    return (\r\n      <button level={timesPressed} onClick={this.onPress}>\r\n        {dialog[timesPressed]}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n","import React, { useState } from 'react';\r\nimport UpdateMovie from './UpdateMovie';\r\nimport DelConBtn from './DelConBtn';\r\n\r\nconst Movie = ({movie, deleteMovies, refresh}) => {\r\n    const [update, setUpdate] = useState(false);\r\n    const toggleForm = () => setUpdate(!update);\r\n    return(\r\n        <li>\r\n            <button\r\n            onClick={()=> toggleForm()}>Update</button>\r\n            {movie.title},\r\n            {movie.year}\r\n            <DelConBtn\r\n                dialog={[\"Delete\", \"Confirm Delete\"]}\r\n                action={() => deleteMovies(movie._id, refresh)} />\r\n\r\n        {update ? \r\n        <UpdateMovie movie={movie}\r\n            toggleForm={toggleForm}\r\n            refresh={refresh} /> : ''}\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Movie","import React from 'react';\r\n\r\nexport default class NewMovie extends React.Component {\r\n    state = {\r\n        title: \"\",\r\n        year: \"\",\r\n        seen: \"\"\r\n    };\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const api_url = process.env.REACT_APP_API_URL;\r\n        fetch(`${api_url}/movies`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(this.state) \r\n        }) .then(response => response.json())\r\n            .then(data => console.log(data))\r\n            .then(() => {\r\n                this.setState({\r\n                    title: \"\",\r\n                    year: \"\",\r\n                    seen: \"\"\r\n                })\r\n            }) .then(this.props.refresh)            \r\n    }\r\n    handleChange = (event) => {\r\n        this.setState({ [event.target.name] : event.target.value});\r\n    }\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                <input name=\"title\"\r\n                    type=\"text\"\r\n                    placeholder=\"Movie Title\"\r\n                    value={this.state.title}\r\n                    onChange={this.handleChange} \r\n                    required/>\r\n                <input name=\"year\"\r\n                    type=\"number\"\r\n                    placeholder=\"YYYY\"\r\n                    value={this.state.year}\r\n                    onChange={this.handleChange} />\r\n                <input name=\"seen\"\r\n                    type=\"text\"\r\n                    placeholder=\"Seen it?\"\r\n                    value={this.state.seen}\r\n                    onChange={this.handleChange} />\r\n                \r\n                \r\n                <input type=\"submit\"\r\n                    value=\"Add Movie\"/>\r\n            </form>           \r\n        ) \r\n    }\r\n}\r\n","import React from 'react';\r\nimport Movie from './Movie';\r\nimport NewMovie from './NewMovie';\r\n\r\n\r\nclass Movies extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            movies: [ ]\r\n        }\r\n        this.getMovies = this.getMovies.bind(this);\r\n    }\r\n    getMovies () {\r\n        const api_url = process.env.REACT_APP_API_URL;\r\n        fetch(`${api_url}/movies`)\r\n            .then(response => response.json())\r\n            .then(data => this.setState({movies:data}));\r\n    }\r\n    componentDidMount() {\r\n        this.getMovies();\r\n    }\r\n    \r\n    deleteMovies = (id, refresh) => {\r\n        const api_url = process.env.REACT_APP_API_URL;\r\n        fetch(`${api_url}/movies/${id}`, {\r\n            method: \"DELETE\"\r\n        }) .then(response => response.json())\r\n            .then(data =>{ \r\n                console.log(data);\r\n                refresh();\r\n            })\r\n    }\r\n    \r\n    render() {\r\n        const displayMovies = this.state.movies.map(movie =>\r\n            <Movie \r\n                key={movie._id} \r\n                movie={movie}\r\n                deleteMovies={this.deleteMovies}\r\n                refresh={this.getMovies} />\r\n        ); \r\n        return (\r\n            <div>\r\n                <h2>Simple-Crud Project</h2>\r\n                <NewMovie refresh={this.getMovies} />\r\n                <ul>\r\n                    {displayMovies} \r\n                \r\n                </ul>\r\n                             \r\n            </div>    \r\n        )\r\n    }   \r\n}\r\nexport default Movies;","import React from 'react';\nimport './App.css';\nimport Movies from './components/Movies';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Movies/>   \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}